/* eslint-disable */
/* This file is autogenerated, see codegen.yml */
import { FieldPolicy, FieldReadFunction, TypePolicies, TypePolicy } from '@apollo/client/cache';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type GqlQuery = {
  __typename?: 'Query';
  getAllProviders: Array<GqlProvider>;
  getCurrentUser: GqlUser;
  getCurrentUserConfig: GqlUserConfig;
  getCurrentUserPlaylists: Array<GqlPlaylist>;
  hello: Maybe<Scalars['String']>;
};

export type GqlMutation = {
  __typename?: 'Mutation';
  deleteCurrentUser: GqlUser;
  deleteCurrentUserProviders: Array<Maybe<GqlProvider>>;
  hello: Maybe<Scalars['String']>;
  logoutCurrentUser: GqlUser;
  updateCurrentUserConfig: GqlUserConfig;
};


export type GqlMutationdeleteCurrentUserProvidersArgs = {
  providerIds: Array<Scalars['String']>;
};


export type GqlMutationupdateCurrentUserConfigArgs = {
  userConfigInput: GqlUserConfigInput;
};

export type GqlProvider = {
  __typename?: 'Provider';
  providerId: Scalars['String'];
  name: Scalars['String'];
  isAuthProvider: Scalars['Boolean'];
  isActivityProvider: Scalars['Boolean'];
  isPlaylistProvider: Scalars['Boolean'];
};

export type GqlAuthProvider = 
  | 'FACEBOOK'
  | 'GOOGLE';

export type GqlPlaylistProvider = 
  | 'SPOTIFY';

export type GqlActivityProvider = 
  | 'STRAVA';

export type GqlUserConfig = {
  __typename?: 'UserConfig';
  /** Whether user playlists should be created as collaborative */
  playlistCollaborative: Scalars['Boolean'];
  /** Whether user playlists should be created as public */
  playlistPublic: Scalars['Boolean'];
  /** Whether user playlists should be created automatically */
  playlistAutoCreate: Scalars['Boolean'];
  /** Template for creating playlist description */
  playlistDescriptionTemplate: Maybe<Scalars['String']>;
  /** Template for creating playlist title */
  playlistTitleTemplate: Maybe<Scalars['String']>;
  /** Whether activity description should be updated after playlist is created */
  activityDescriptionEnabled: Scalars['Boolean'];
  /** Template for creating updated activity description that includes playlist */
  activityDescriptionTemplate: Maybe<Scalars['String']>;
};

export type GqlUserConfigInput = {
  /** Whether user playlists should be created as collaborative */
  playlistCollaborative?: Maybe<Scalars['Boolean']>;
  /** Whether user playlists should be created as public */
  playlistPublic?: Maybe<Scalars['Boolean']>;
  /** Whether user playlists should be created automatically */
  playlistAutoCreate?: Maybe<Scalars['Boolean']>;
  /** Template for creating playlist description */
  playlistDescriptionTemplate?: Maybe<Scalars['String']>;
  /** Template for creating playlist title */
  playlistTitleTemplate?: Maybe<Scalars['String']>;
  /** Whether activity description should be updated after playlist is created */
  activityDescriptionEnabled?: Maybe<Scalars['Boolean']>;
  /** Template for creating updated activity description that includes playlist */
  activityDescriptionTemplate?: Maybe<Scalars['String']>;
};

export type GqlPlaylist = {
  __typename?: 'Playlist';
  playlistProviderId: Scalars['String'];
  playlistId: Scalars['String'];
  playlistUrl: Maybe<Scalars['String']>;
  playlistName: Maybe<Scalars['String']>;
  activityProviderId: Scalars['String'];
  activityId: Scalars['String'];
  activityName: Maybe<Scalars['String']>;
  activityUrl: Maybe<Scalars['String']>;
  dateCreated: Maybe<Scalars['Int']>;
};

export type GqlUser = {
  __typename?: 'User';
  userId: Scalars['String'];
  email: Maybe<Scalars['String']>;
  nameFamily: Maybe<Scalars['String']>;
  nameGiven: Maybe<Scalars['String']>;
  nameDisplay: Maybe<Scalars['String']>;
  photo: Maybe<Scalars['String']>;
  providers: Array<GqlProvider>;
};

export type GqlgetCurrentUserQueryVariables = Exact<{ [key: string]: never; }>;


export type GqlgetCurrentUserQuery = (
  { __typename?: 'Query' }
  & { getCurrentUser: (
    { __typename?: 'User' }
    & Pick<GqlUser, 'userId' | 'email' | 'nameFamily' | 'nameGiven' | 'nameDisplay' | 'photo'>
    & { providers: Array<(
      { __typename?: 'Provider' }
      & Pick<GqlProvider, 'providerId' | 'name' | 'isActivityProvider' | 'isPlaylistProvider' | 'isAuthProvider'>
    )> }
  ) }
);

export type GqldeleteCurrentUserMutationVariables = Exact<{ [key: string]: never; }>;


export type GqldeleteCurrentUserMutation = (
  { __typename?: 'Mutation' }
  & { deleteCurrentUser: (
    { __typename?: 'User' }
    & Pick<GqlUser, 'userId'>
  ) }
);

export type GqldeleteCurrentUserIntegrationsMutationVariables = Exact<{
  providerIds: Array<Scalars['String']> | Scalars['String'];
}>;


export type GqldeleteCurrentUserIntegrationsMutation = (
  { __typename?: 'Mutation' }
  & { deleteCurrentUserProviders: Array<Maybe<(
    { __typename?: 'Provider' }
    & Pick<GqlProvider, 'providerId'>
  )>> }
);

export type GqllogoutCurrentUserMutationVariables = Exact<{ [key: string]: never; }>;


export type GqllogoutCurrentUserMutation = (
  { __typename?: 'Mutation' }
  & { logoutCurrentUser: (
    { __typename?: 'User' }
    & Pick<GqlUser, 'userId'>
  ) }
);

export type GqlgetAllProvidersQueryVariables = Exact<{ [key: string]: never; }>;


export type GqlgetAllProvidersQuery = (
  { __typename?: 'Query' }
  & { getAllProviders: Array<(
    { __typename?: 'Provider' }
    & Pick<GqlProvider, 'providerId' | 'name' | 'isActivityProvider' | 'isPlaylistProvider' | 'isAuthProvider'>
  )> }
);

export type GqlgetCurrentUserPlaylistsQueryVariables = Exact<{ [key: string]: never; }>;


export type GqlgetCurrentUserPlaylistsQuery = (
  { __typename?: 'Query' }
  & { getCurrentUserPlaylists: Array<(
    { __typename?: 'Playlist' }
    & Pick<GqlPlaylist, 'playlistProviderId' | 'playlistId' | 'playlistUrl' | 'playlistName' | 'activityProviderId' | 'activityName' | 'activityUrl' | 'dateCreated'>
  )> }
);

export type GqlgetCurrentUserConfigQueryVariables = Exact<{ [key: string]: never; }>;


export type GqlgetCurrentUserConfigQuery = (
  { __typename?: 'Query' }
  & { getCurrentUserConfig: (
    { __typename?: 'UserConfig' }
    & Pick<GqlUserConfig, 'playlistCollaborative' | 'playlistPublic' | 'playlistAutoCreate' | 'playlistDescriptionTemplate' | 'playlistTitleTemplate' | 'activityDescriptionEnabled' | 'activityDescriptionTemplate'>
  ) }
);

export type GqlupdateCurrentUserConfigMutationVariables = Exact<{
  userConfigInput: GqlUserConfigInput;
}>;


export type GqlupdateCurrentUserConfigMutation = (
  { __typename?: 'Mutation' }
  & { updateCurrentUserConfig: (
    { __typename?: 'UserConfig' }
    & Pick<GqlUserConfig, 'playlistCollaborative' | 'playlistPublic' | 'playlistAutoCreate' | 'playlistDescriptionTemplate' | 'playlistTitleTemplate' | 'activityDescriptionEnabled' | 'activityDescriptionTemplate'>
  ) }
);

export type QueryKeySpecifier = ('getAllProviders' | 'getCurrentUser' | 'getCurrentUserConfig' | 'getCurrentUserPlaylists' | 'hello' | QueryKeySpecifier)[];
export type QueryFieldPolicy = {
	getAllProviders?: FieldPolicy<any> | FieldReadFunction<any>,
	getCurrentUser?: FieldPolicy<any> | FieldReadFunction<any>,
	getCurrentUserConfig?: FieldPolicy<any> | FieldReadFunction<any>,
	getCurrentUserPlaylists?: FieldPolicy<any> | FieldReadFunction<any>,
	hello?: FieldPolicy<any> | FieldReadFunction<any>
};
export type MutationKeySpecifier = ('deleteCurrentUser' | 'deleteCurrentUserProviders' | 'hello' | 'logoutCurrentUser' | 'updateCurrentUserConfig' | MutationKeySpecifier)[];
export type MutationFieldPolicy = {
	deleteCurrentUser?: FieldPolicy<any> | FieldReadFunction<any>,
	deleteCurrentUserProviders?: FieldPolicy<any> | FieldReadFunction<any>,
	hello?: FieldPolicy<any> | FieldReadFunction<any>,
	logoutCurrentUser?: FieldPolicy<any> | FieldReadFunction<any>,
	updateCurrentUserConfig?: FieldPolicy<any> | FieldReadFunction<any>
};
export type ProviderKeySpecifier = ('providerId' | 'name' | 'isAuthProvider' | 'isActivityProvider' | 'isPlaylistProvider' | ProviderKeySpecifier)[];
export type ProviderFieldPolicy = {
	providerId?: FieldPolicy<any> | FieldReadFunction<any>,
	name?: FieldPolicy<any> | FieldReadFunction<any>,
	isAuthProvider?: FieldPolicy<any> | FieldReadFunction<any>,
	isActivityProvider?: FieldPolicy<any> | FieldReadFunction<any>,
	isPlaylistProvider?: FieldPolicy<any> | FieldReadFunction<any>
};
export type UserConfigKeySpecifier = ('playlistCollaborative' | 'playlistPublic' | 'playlistAutoCreate' | 'playlistDescriptionTemplate' | 'playlistTitleTemplate' | 'activityDescriptionEnabled' | 'activityDescriptionTemplate' | UserConfigKeySpecifier)[];
export type UserConfigFieldPolicy = {
	playlistCollaborative?: FieldPolicy<any> | FieldReadFunction<any>,
	playlistPublic?: FieldPolicy<any> | FieldReadFunction<any>,
	playlistAutoCreate?: FieldPolicy<any> | FieldReadFunction<any>,
	playlistDescriptionTemplate?: FieldPolicy<any> | FieldReadFunction<any>,
	playlistTitleTemplate?: FieldPolicy<any> | FieldReadFunction<any>,
	activityDescriptionEnabled?: FieldPolicy<any> | FieldReadFunction<any>,
	activityDescriptionTemplate?: FieldPolicy<any> | FieldReadFunction<any>
};
export type PlaylistKeySpecifier = ('playlistProviderId' | 'playlistId' | 'playlistUrl' | 'playlistName' | 'activityProviderId' | 'activityId' | 'activityName' | 'activityUrl' | 'dateCreated' | PlaylistKeySpecifier)[];
export type PlaylistFieldPolicy = {
	playlistProviderId?: FieldPolicy<any> | FieldReadFunction<any>,
	playlistId?: FieldPolicy<any> | FieldReadFunction<any>,
	playlistUrl?: FieldPolicy<any> | FieldReadFunction<any>,
	playlistName?: FieldPolicy<any> | FieldReadFunction<any>,
	activityProviderId?: FieldPolicy<any> | FieldReadFunction<any>,
	activityId?: FieldPolicy<any> | FieldReadFunction<any>,
	activityName?: FieldPolicy<any> | FieldReadFunction<any>,
	activityUrl?: FieldPolicy<any> | FieldReadFunction<any>,
	dateCreated?: FieldPolicy<any> | FieldReadFunction<any>
};
export type UserKeySpecifier = ('userId' | 'email' | 'nameFamily' | 'nameGiven' | 'nameDisplay' | 'photo' | 'providers' | UserKeySpecifier)[];
export type UserFieldPolicy = {
	userId?: FieldPolicy<any> | FieldReadFunction<any>,
	email?: FieldPolicy<any> | FieldReadFunction<any>,
	nameFamily?: FieldPolicy<any> | FieldReadFunction<any>,
	nameGiven?: FieldPolicy<any> | FieldReadFunction<any>,
	nameDisplay?: FieldPolicy<any> | FieldReadFunction<any>,
	photo?: FieldPolicy<any> | FieldReadFunction<any>,
	providers?: FieldPolicy<any> | FieldReadFunction<any>
};
export type TypedTypePolicies = TypePolicies & {
	Query?: Omit<TypePolicy, "fields" | "keyFields"> & {
		keyFields?: false | QueryKeySpecifier | (() => undefined | QueryKeySpecifier),
		fields?: QueryFieldPolicy,
	},
	Mutation?: Omit<TypePolicy, "fields" | "keyFields"> & {
		keyFields?: false | MutationKeySpecifier | (() => undefined | MutationKeySpecifier),
		fields?: MutationFieldPolicy,
	},
	Provider?: Omit<TypePolicy, "fields" | "keyFields"> & {
		keyFields?: false | ProviderKeySpecifier | (() => undefined | ProviderKeySpecifier),
		fields?: ProviderFieldPolicy,
	},
	UserConfig?: Omit<TypePolicy, "fields" | "keyFields"> & {
		keyFields?: false | UserConfigKeySpecifier | (() => undefined | UserConfigKeySpecifier),
		fields?: UserConfigFieldPolicy,
	},
	Playlist?: Omit<TypePolicy, "fields" | "keyFields"> & {
		keyFields?: false | PlaylistKeySpecifier | (() => undefined | PlaylistKeySpecifier),
		fields?: PlaylistFieldPolicy,
	},
	User?: Omit<TypePolicy, "fields" | "keyFields"> & {
		keyFields?: false | UserKeySpecifier | (() => undefined | UserKeySpecifier),
		fields?: UserFieldPolicy,
	}
};
// Generated on 2021-03-14T17:42:57+00:00
