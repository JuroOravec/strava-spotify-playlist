/* eslint-disable */
/* This file is autogenerated, see codegen.yml */
import gql from 'graphql-tag';
import * as VueApolloComposable from '@vue/apollo-composable';
import * as VueCompositionApi from '@vue/composition-api';
type Maybe<T> = T | null;
type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type ReactiveFunction<TParam> = () => TParam;
/** All built-in and custom scalars, mapped to their actual values */
type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

type Query = {
  __typename?: 'Query';
  getCurrentUser: User;
  hello: Maybe<Scalars['String']>;
};

type Mutation = {
  __typename?: 'Mutation';
  hello: Maybe<Scalars['String']>;
};

type User = {
  __typename?: 'User';
  userId: Scalars['String'];
  email: Maybe<Scalars['String']>;
  nameFamily: Maybe<Scalars['String']>;
  nameGiven: Maybe<Scalars['String']>;
  nameDisplay: Maybe<Scalars['String']>;
  photo: Maybe<Scalars['String']>;
  providers: Array<UserProvider>;
};

type UserProvider = {
  __typename?: 'UserProvider';
  providerId: Scalars['String'];
};

type getCurrentUserQueryVariables = Exact<{ [key: string]: never; }>;


type getCurrentUserQuery = (
  { __typename?: 'Query' }
  & { getCurrentUser: (
    { __typename?: 'User' }
    & Pick<User, 'userId' | 'email' | 'nameFamily' | 'nameGiven' | 'nameDisplay' | 'photo'>
    & { providers: Array<(
      { __typename?: 'UserProvider' }
      & Pick<UserProvider, 'providerId'>
    )> }
  ) }
);


 const getCurrentUserDocument = gql`
    query getCurrentUser {
  getCurrentUser {
    userId
    email
    nameFamily
    nameGiven
    nameDisplay
    photo
    providers {
      providerId
    }
  }
}
    `;

/**
 * __usegetCurrentUserQuery__
 *
 * To run a query within a Vue component, call `usegetCurrentUserQuery` and pass it any options that fit your needs.
 * When your component renders, `usegetCurrentUserQuery` returns an object from Apollo Client that contains result, loading and error properties
 * you can use to render your UI.
 *
 * @param options that will be passed into the query, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/query.html#options;
 *
 * @example
 * const { result, loading, error } = usegetCurrentUserQuery();
 */
export function usegetCurrentUserQuery(options: VueApolloComposable.UseQueryOptions<getCurrentUserQuery, getCurrentUserQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<getCurrentUserQuery, getCurrentUserQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<getCurrentUserQuery, getCurrentUserQueryVariables>> = {}) {
  return VueApolloComposable.useQuery<getCurrentUserQuery, getCurrentUserQueryVariables>(getCurrentUserDocument, {}, options);
}
export type getCurrentUserQueryCompositionFunctionResult = VueApolloComposable.UseQueryReturn<getCurrentUserQuery, getCurrentUserQueryVariables>;
// Generated on 2021-01-25T23:02:00+00:00
