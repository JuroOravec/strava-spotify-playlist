/* eslint-disable */
/* This file is autogenerated, see codegen.composables.yml */

import type { ServerModules } from '../lib/ServerModule';

/**
 * Context available in ResolverContext
 *
 * To extend this interface, use:
 * @example
 * declare module './path/to/graphql.d.ts' {
 *   interface ResolverContext<TModules extends ServerModules = ServerModules> 
 *     extends MyExtendingInterface {
 *     // Define additional props here
 *   }
 * }
 */
export interface ResolverContext<TModules extends ServerModules = ServerModules> {}

import type { GraphQLResolveInfo } from 'graphql';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type RequireFields<T, K extends keyof T> = { [X in Exclude<keyof T, K>]?: T[X] } & { [P in K]-?: NonNullable<T[P]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type GqlQuery = {
  __typename?: 'Query';
  getCurrentUser: GqlUser;
  hello?: Maybe<Scalars['String']>;
};

export type GqlMutation = {
  __typename?: 'Mutation';
  deleteCurrentUser: GqlUser;
  deleteCurrentUserProviders: Array<Maybe<GqlUserProvider>>;
  hello?: Maybe<Scalars['String']>;
};


export type GqlMutationDeleteCurrentUserProvidersArgs = {
  providerIds: Array<Scalars['String']>;
};

export type GqlUser = {
  __typename?: 'User';
  userId: Scalars['String'];
  email?: Maybe<Scalars['String']>;
  nameFamily?: Maybe<Scalars['String']>;
  nameGiven?: Maybe<Scalars['String']>;
  nameDisplay?: Maybe<Scalars['String']>;
  photo?: Maybe<Scalars['String']>;
  providers: Array<GqlUserProvider>;
};

export type GqlUserProvider = {
  __typename?: 'UserProvider';
  providerId: Scalars['String'];
};



export type ResolverTypeWrapper<T> = Promise<T> | T;


export type LegacyStitchingResolver<TResult, TParent, TContext, TArgs> = {
  fragment: string;
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};

export type NewStitchingResolver<TResult, TParent, TContext, TArgs> = {
  selectionSet: string;
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export type StitchingResolver<TResult, TParent, TContext, TArgs> = LegacyStitchingResolver<TResult, TParent, TContext, TArgs> | NewStitchingResolver<TResult, TParent, TContext, TArgs>;
export type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> =
  | ResolverFn<TResult, TParent, TContext, TArgs>
  | StitchingResolver<TResult, TParent, TContext, TArgs>;

export type ResolverFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info?: GraphQLResolveInfo
) => Promise<TResult> | TResult;

export type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info?: GraphQLResolveInfo
) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;

export type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info?: GraphQLResolveInfo
) => TResult | Promise<TResult>;

export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<{ [key in TKey]: TResult }, TParent, TContext, TArgs>;
  resolve?: SubscriptionResolveFn<TResult, { [key in TKey]: TResult }, TContext, TArgs>;
}

export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}

export type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> =
  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>
  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;

export type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> =
  | ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)
  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;

export type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (
  parent: TParent,
  context: TContext,
  info?: GraphQLResolveInfo
) => Maybe<TTypes> | Promise<Maybe<TTypes>>;

export type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info?: GraphQLResolveInfo) => boolean | Promise<boolean>;

export type NextResolverFn<T> = () => Promise<T>;

export type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (
  next: NextResolverFn<TResult>,
  parent: TParent,
  args: TArgs,
  context: TContext,
  info?: GraphQLResolveInfo
) => TResult | Promise<TResult>;

/** Mapping between all available schema types and the resolvers types */
export type GqlResolversTypes = {
  Query: ResolverTypeWrapper<{}>;
  String: ResolverTypeWrapper<Partial<Scalars['String']>>;
  Mutation: ResolverTypeWrapper<{}>;
  User: ResolverTypeWrapper<Partial<GqlUser>>;
  UserProvider: ResolverTypeWrapper<Partial<GqlUserProvider>>;
  Boolean: ResolverTypeWrapper<Partial<Scalars['Boolean']>>;
};

/** Mapping between all available schema types and the resolvers parents */
export type GqlResolversParentTypes = {
  Query: {};
  String: Partial<Scalars['String']>;
  Mutation: {};
  User: Partial<GqlUser>;
  UserProvider: Partial<GqlUserProvider>;
  Boolean: Partial<Scalars['Boolean']>;
};

export type GqlQueryResolvers<ContextType = ResolverContext, ParentType extends GqlResolversParentTypes['Query'] = GqlResolversParentTypes['Query']> = {
  getCurrentUser?: Resolver<GqlResolversTypes['User'], ParentType, ContextType>;
  hello?: Resolver<Maybe<GqlResolversTypes['String']>, ParentType, ContextType>;
};

export type GqlMutationResolvers<ContextType = ResolverContext, ParentType extends GqlResolversParentTypes['Mutation'] = GqlResolversParentTypes['Mutation']> = {
  deleteCurrentUser?: Resolver<GqlResolversTypes['User'], ParentType, ContextType>;
  deleteCurrentUserProviders?: Resolver<Array<Maybe<GqlResolversTypes['UserProvider']>>, ParentType, ContextType, RequireFields<GqlMutationDeleteCurrentUserProvidersArgs, 'providerIds'>>;
  hello?: Resolver<Maybe<GqlResolversTypes['String']>, ParentType, ContextType>;
};

export type GqlUserResolvers<ContextType = ResolverContext, ParentType extends GqlResolversParentTypes['User'] = GqlResolversParentTypes['User']> = {
  userId?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  email?: Resolver<Maybe<GqlResolversTypes['String']>, ParentType, ContextType>;
  nameFamily?: Resolver<Maybe<GqlResolversTypes['String']>, ParentType, ContextType>;
  nameGiven?: Resolver<Maybe<GqlResolversTypes['String']>, ParentType, ContextType>;
  nameDisplay?: Resolver<Maybe<GqlResolversTypes['String']>, ParentType, ContextType>;
  photo?: Resolver<Maybe<GqlResolversTypes['String']>, ParentType, ContextType>;
  providers?: Resolver<Array<GqlResolversTypes['UserProvider']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type GqlUserProviderResolvers<ContextType = ResolverContext, ParentType extends GqlResolversParentTypes['UserProvider'] = GqlResolversParentTypes['UserProvider']> = {
  providerId?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type GqlResolvers<ContextType = ResolverContext> = {
  Query?: GqlQueryResolvers<ContextType>;
  Mutation?: GqlMutationResolvers<ContextType>;
  User?: GqlUserResolvers<ContextType>;
  UserProvider?: GqlUserProviderResolvers<ContextType>;
};



// Generated on 2021-01-27T20:38:43+00:00
