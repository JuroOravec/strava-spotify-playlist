/* eslint-disable */
/* This file is autogenerated, see codegen.composables.yml */
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type GqlQuery = {
  __typename?: 'Query';
  getCurrentUser: GqlUser;
  hello?: Maybe<Scalars['String']>;
};

export type GqlMutation = {
  __typename?: 'Mutation';
  hello?: Maybe<Scalars['String']>;
};

export type GqlUser = {
  __typename?: 'User';
  email?: Maybe<Scalars['String']>;
  nameFamily?: Maybe<Scalars['String']>;
  nameGiven?: Maybe<Scalars['String']>;
  nameDisplay?: Maybe<Scalars['String']>;
  photo?: Maybe<Scalars['String']>;
  providers: Array<GqlUserProvider>;
};

export type GqlUserProvider = {
  __typename?: 'UserProvider';
  providerId: Scalars['String'];
};

// Generated on 2021-01-24T14:28:20+00:00
